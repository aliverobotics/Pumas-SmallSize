;******************************************************;*									*;*	Initial Rules						*;*									*;******************************************************(defrule ball-out ?f <- (ballout) ?f2 <-(not_stopped) => (sendall stop) (sendall stop) (retract ?f2) (assert (stopped)) ) (defrule our-goal ?f <- (goal 1) ?f2 <- (goingleft) ?f3 <- (score (home ?h) (visitor ?v)) => (retract ?f) (modify  ?f3 (home (+ ?h 1))) (sendall "goal") (assert (waiting)) )(defrule our-goal2 ?f <- (goal 2) (not (goingleft)) ?f3 <- (score (home ?h) (visitor ?v)) => (retract ?f) (modify  ?f3 (home (+ ?h 1))) (sendall "goal") (assert (waiting)) )(defrule other-goal ?f <- (goal 1) (not (goingleft)) ?f3 <- (score (home ?h) (visitor ?v)) => (retract ?f) (modify  ?f3 (visitor (+ ?v 1))) (sendall "othergoal") (assert (waiting)) )(defrule other-goal2 ?f <- (goal 2) ?f2 <- (goingleft) ?f3 <- (score (home ?h) (visitor ?v)) => (retract ?f) (modify  ?f3 (visitor (+ ?v 1))) (sendall "othergoal") (assert (waiting)) )(defrule sendreset ?f <- (resetall)  => (retract ?f) (sendall reset) (sendall go) (assert (not_stopped)) (assert (ballin)) (assert (waiting)) ) (defrule remove-stopped ?f <-(stopped) ?f2<-(not_stopped) => (retract ?f) )  (defrule remove-ball-out ?f <-(ballout) ?f2<-(ballin) => (retract ?f) (retract ?f2) ) 